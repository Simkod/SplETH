import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { AppThunk, RootState } from '../app/store';
import _abi from '../contract.abi.json';

export interface ContractState {
  contractAddress: `0x${string}` | undefined;
  contractABI: any[];
  status: 'idle' | 'loading' | 'failed';
};

const initialState: ContractState = {
  contractAddress: '0x7C7914475625D4DD5816292b3292E59636bf88a5',
  contractABI: _abi,
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'contract/fetchCount',
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const contractSlice = createSlice({
  name: 'contract',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setContractAddress: (state, action: PayloadAction<`0x${string}` | undefined>) => {
      state.contractAddress = action.payload;
    },
    setContractABI: (state, action: PayloadAction<any[]>) => {
      state.contractABI = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       //state.value += action.payload;
  //     })
  //     .addCase(incrementAsync.rejected, (state) => {
  //       state.status = 'failed';
  //     });
  // },
});

export const {
  setContractAddress: setContractAddressAction,
  setContractABI: setContractABIAction
} = contractSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.contract.value)`
export const selectContractAddress = (state: RootState) => state.contract.contractAddress;
export const selectContractABI = (state: RootState) => state.contract.contractABI;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default contractSlice.reducer;
