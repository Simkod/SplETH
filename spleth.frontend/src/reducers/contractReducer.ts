import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { AppThunk, RootState } from '../app/store';
import _abiFactory from '../contractFactory.abi.json';
import _abi from '../contract.abi.json';
import _networks from '../contract.networks.json';
import { BalanceResponse, BalanceService, ErcService, GroupService } from '../services';
import { ERCToken, Group, LoadStatusEnum, User } from '../models';
import { BigNumber } from 'ethers';

export interface ContractState {
  sponsored: boolean;
  contractFactoryAddress: `0x${string}`;
  contractFactoryABI: any[];
  erc20Tokens: {address: string, title: string, symbol: string}[];

  groupsStatus: LoadStatusEnum;
  groups: Group[];

  group: Group | undefined | null; // selected group
  erc20Token: ERCToken | null;

  balanceStatus: LoadStatusEnum;
  balanceWallet: BigNumber;
  balanceGroup: BigNumber;

  usersBalanceStatus: LoadStatusEnum;
  usersStatus: LoadStatusEnum;
  users: User[];

  contractABI: any[];
  isOwner: boolean;
};

const initialState: ContractState = {
  sponsored: false,
  contractFactoryAddress: '0x',
  contractFactoryABI: _abiFactory,
  erc20Tokens: [],

  groupsStatus: LoadStatusEnum.idle,
  groups: [],

  group: undefined,
  erc20Token: null,

  balanceStatus: LoadStatusEnum.idle,
  balanceWallet: BigNumber.from(0),
  balanceGroup: BigNumber.from(0),

  usersBalanceStatus: LoadStatusEnum.idle,
  usersStatus: LoadStatusEnum.idle,
  users: [],
  //
  contractABI: _abi,
  isOwner: false,
};

// Thunks
export const fetchGroupsAsync = createAsyncThunk<Group[], void, { state: RootState }>('contract/fetchGroups',
  (_: void, thunkAPI) => GroupService.load(thunkAPI.getState().contract, thunkAPI.dispatch)
);

export const fetchERCTokenInfoAsync = createAsyncThunk<ERCToken | null, void, { state: RootState }>('contract/fetchERCTokenInfo',
  async (_: void, thunkAPI) => {
    const erc = await ErcService.loadTokenInfoByGroup(thunkAPI.getState().contract);
    thunkAPI.dispatch(fetchERCTokenMoreInfoAsync(erc));
    return erc;
  });

export const fetchERCTokenMoreInfoAsync = createAsyncThunk<ERCToken | null, ERCToken | null, { state: RootState }>('contract/fetchERCTokenMoreInfoAsync',
  (erc, thunkAPI) => ErcService.loadMoreTokenInfo(thunkAPI.getState().contract, erc)
);

export const fetchBalanceAsync = createAsyncThunk<BalanceResponse, void, { state: RootState }>('contract/fetchBalanceAsync',
  (_: void, thunkAPI) => {
    return BalanceService.loadUserAndSmartContractBalance(thunkAPI.getState().contract);
  }
);

export const fetchUsersBalanceAsync = createAsyncThunk<User[], void, { state: RootState }>('contract/fetchUsersBalanceAsync',
  (_: void, thunkAPI) => BalanceService.loadUsersBalance(thunkAPI.getState().contract)
);

export const fetchUsersAsync = createAsyncThunk<User[], void, { state: RootState }>('contract/fetchUsersAsync',
  async (_: void, thunkAPI) => {
    const users = await GroupService.loadUsers(thunkAPI.getState().contract);
    return users;
  }
);

export const contractSlice = createSlice({
  name: 'contract',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

    setChain: (state, action: PayloadAction<string>) => {
      let network = (_networks as any)[action.payload];
      if (!network)
        return;

      state.sponsored = network.sponsored;
      state.contractFactoryAddress = network.contractFactoryAddress;
      state.erc20Tokens = network.erc20Tokens;
    },

    setGroup: (state, action: PayloadAction<Group | undefined | null>) => {
      state.group = action.payload;
    },

    ///
    setIsOwner: (state, action: PayloadAction<boolean>) => {
      state.isOwner = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchGroupsAsync.pending, (state) => {
        state.groupsStatus = LoadStatusEnum.loading;
      })
      .addCase(fetchGroupsAsync.fulfilled, (state, action) => {
        state.groupsStatus = LoadStatusEnum.loaded;
        state.groups = action.payload;
      })
      .addCase(fetchGroupsAsync.rejected, (state) => {
        state.groupsStatus = LoadStatusEnum.failed;
      })

      .addCase(fetchERCTokenInfoAsync.fulfilled, (state, action) => {
        state.erc20Token = action.payload;
      })
      .addCase(fetchERCTokenMoreInfoAsync.fulfilled, (state, action) => {
        state.erc20Token = action.payload;
      })

      .addCase(fetchBalanceAsync.pending, (state) => {
        state.balanceStatus = LoadStatusEnum.loading;
      })
      .addCase(fetchBalanceAsync.fulfilled, (state, action) => {
        state.balanceStatus = LoadStatusEnum.loaded;
        state.balanceGroup = action.payload.smartContract;
        state.balanceWallet = action.payload.user;
      })
      .addCase(fetchBalanceAsync.rejected, (state) => {
        state.balanceStatus = LoadStatusEnum.failed;
        state.balanceGroup = BigNumber.from(0);
        state.balanceWallet = BigNumber.from(0);
      })

      .addCase(fetchUsersBalanceAsync.pending, (state) => {
        state.usersBalanceStatus = LoadStatusEnum.loading;
      })
      .addCase(fetchUsersBalanceAsync.fulfilled, (state, action) => {
        state.usersBalanceStatus = LoadStatusEnum.loaded;
        state.users = action.payload;
      })
      .addCase(fetchUsersBalanceAsync.rejected, (state) => {
        state.usersBalanceStatus = LoadStatusEnum.failed;
      })

      .addCase(fetchUsersAsync.pending, (state) => {
        state.usersStatus = LoadStatusEnum.loading;
      })
      .addCase(fetchUsersAsync.fulfilled, (state, action) => {
        state.usersStatus = LoadStatusEnum.loaded;
        state.users = action.payload;
      })
      .addCase(fetchUsersAsync.rejected, (state) => {
        state.usersStatus = LoadStatusEnum.failed;
      });
  },
});

export const {
  setChain: setChainAction,
  setGroup: setGroupAction,

  //
  setIsOwner: setIsOwnerAction,
} = contractSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.contract.value)`
export const selectContractState = (state: RootState) => state.contract;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default contractSlice.reducer;
