import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { AppThunk, RootState } from '../app/store';
import _abiFactory from '../contractFactory.abi.json';
import _abi from '../contract.abi.json';
import _networks from '../contract.networks.json';
import { GroupService } from '../services';
import { Group, LoadStatusEnum } from '../models';

export interface ContractState {
  erc20Tokens: {address: string, title: string, symbol: string}[];

  groupsStatus: LoadStatusEnum;
  groups: Group[];
  group: Group | undefined | null; // selected group

  contractFactoryAddress: `0x${string}`;
  contractFactoryABI: any[];
  contractAddress: `0x${string}` | undefined | null;
  contractABI: any[];
  isOwner: boolean;

  needFetchBalance: boolean;
  needFetchUsers: boolean;

};

const initialState: ContractState = {
  erc20Tokens: [],

  groupsStatus: LoadStatusEnum.idle,
  groups: [],
  group: undefined,

  //
  contractFactoryAddress: '0x',
  contractFactoryABI: _abiFactory,
  contractAddress: undefined, // ?
  contractABI: _abi,
  isOwner: false,

  needFetchBalance: false,
  needFetchUsers: false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(fetchGroupsAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchGroupsAsync = createAsyncThunk<Group[], void, { state: RootState}>(
  'contract/fetchGroups',
  async (_: void, thunkAPI) => {
    const state = thunkAPI.getState();
    const response = await GroupService.load(state.contract);

    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const contractSlice = createSlice({
  name: 'contract',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

    setChain: (state, action: PayloadAction<string>) => {
      let network = (_networks as any)[action.payload];
      if (!network)
        return;

      state.contractFactoryAddress = network.contractFactoryAddress;
      state.erc20Tokens = network.erc20Tokens;
    },

    setGroup: (state, action: PayloadAction<Group | undefined | null>) => {
      state.group = action.payload;
    },

    ///
    setIsOwner: (state, action: PayloadAction<boolean>) => {
      state.isOwner = action.payload;
    },
    setNeedFetchBalance: (state, action: PayloadAction<boolean>) => {
      state.needFetchBalance = action.payload;
    },
    setNeedFetchUsers: (state, action: PayloadAction<boolean>) => {
      state.needFetchUsers = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchGroupsAsync.pending, (state) => {
        state.groupsStatus = LoadStatusEnum.loading;
      })
      .addCase(fetchGroupsAsync.fulfilled, (state, action) => {
        state.groupsStatus = LoadStatusEnum.loaded;
        state.groups = action.payload;
      })
      .addCase(fetchGroupsAsync.rejected, (state) => {
        state.groupsStatus = LoadStatusEnum.failed;
      });
  },
});

export const {
  setChain: setChainAction,
  setGroup: setGroupAction,

  //
  setIsOwner: setIsOwnerAction,
  setNeedFetchBalance: setNeedFetchBalanceAction,
  setNeedFetchUsers: setNeedFetchUsersAction
} = contractSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.contract.value)`
export const selectContractState = (state: RootState) => state.contract;

export const selectContractAddress = (state: RootState) => state.contract.contractAddress;
export const selectContractABI = (state: RootState) => state.contract.contractABI;
export const selectIsOwner = (state: RootState) => state.contract.isOwner;

export const selectNeedFetchBalance = (state: RootState) => state.contract.needFetchBalance;
export const selectNeedFetchUsers = (state: RootState) => state.contract.needFetchUsers;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default contractSlice.reducer;
